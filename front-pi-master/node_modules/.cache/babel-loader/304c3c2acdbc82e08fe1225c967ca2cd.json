{"remainingRequest":"d:\\Users\\Leda\\Desktop\\front-pi-master\\node_modules\\babel-loader\\lib\\index.js!d:\\Users\\Leda\\Desktop\\front-pi-master\\node_modules\\eslint-loader\\index.js??ref--13-0!d:\\Users\\Leda\\Desktop\\front-pi-master\\src\\_services\\user.service.js","dependencies":[{"path":"d:\\Users\\Leda\\Desktop\\front-pi-master\\src\\_services\\user.service.js","mtime":1571172295000},{"path":"d:\\Users\\Leda\\Desktop\\front-pi-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"d:\\Users\\Leda\\Desktop\\front-pi-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"d:\\Users\\Leda\\Desktop\\front-pi-master\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { config } from '.';\nexport var userService = {\n  login: login,\n  logout: logout\n};\n\nfunction login(login, senha) {\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      login: login,\n      senha: senha\n    })\n  };\n  return fetch(\"\".concat(config.apiUrl, \"/token\"), requestOptions).then(handleResponse).then(function (user) {\n    if (user.value) {\n      localStorage.setItem('usuario', JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  localStorage.removeItem('usuario');\n}\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        logout();\n        location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}",{"version":3,"sources":["d:\\Users\\Leda\\Desktop\\front-pi-master\\src\\_services\\user.service.js"],"names":["config","userService","login","logout","senha","requestOptions","method","headers","body","JSON","stringify","fetch","apiUrl","then","handleResponse","user","value","localStorage","setItem","removeItem","response","text","data","parse","ok","status","location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA,SAASA,MAAT,QAAuB,GAAvB;AAEA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,KAAK,EAALA,KADyB;AAEzBC,EAAAA,MAAM,EAANA;AAFyB,CAApB;;AAKP,SAASD,KAAT,CAAgBA,KAAhB,EAAuBE,KAAvB,EAA8B;AAC5B,MAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,MAAAA,KAAK,EAALA,KAAF;AAASE,MAAAA,KAAK,EAALA;AAAT,KAAf;AAHe,GAAvB;AAKA,SAAOO,KAAK,WAAIX,MAAM,CAACY,MAAX,aAA2BP,cAA3B,CAAL,CACJQ,IADI,CACCC,cADD,EAEJD,IAFI,CAEC,UAAAE,IAAI,EAAI;AACZ,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACdC,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCT,IAAI,CAACC,SAAL,CAAeK,IAAf,CAAhC;AACD;;AACD,WAAOA,IAAP;AACD,GAPI,CAAP;AAQD;;AAED,SAASZ,MAAT,GAAmB;AACjBc,EAAAA,YAAY,CAACE,UAAb,CAAwB,SAAxB;AACD;;AAED,SAASL,cAAT,CAAyBM,QAAzB,EAAmC;AACjC,SAAOA,QAAQ,CAACC,IAAT,GAAgBR,IAAhB,CAAqB,UAAAQ,IAAI,EAAI;AAClC,QAAMC,IAAI,GAAGD,IAAI,IAAIZ,IAAI,CAACc,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AAChB,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AAC3BtB,QAAAA,MAAM;AACNuB,QAAAA,QAAQ,CAACC,MAAT,CAAgB,IAAhB;AACD;;AACD,UAAMC,KAAK,GAAIN,IAAI,IAAIA,IAAI,CAACO,OAAd,IAA0BT,QAAQ,CAACU,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD;;AACD,WAAON,IAAP;AACD,GAXM,CAAP;AAYD","sourcesContent":["import { config } from '.'\r\n\r\nexport const userService = {\r\n  login,\r\n  logout\r\n}\r\n\r\nfunction login (login, senha) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ login, senha })\r\n  }\r\n  return fetch(`${config.apiUrl}/token`, requestOptions)\r\n    .then(handleResponse)\r\n    .then(user => {\r\n      if (user.value) {\r\n        localStorage.setItem('usuario', JSON.stringify(user))\r\n      }\r\n      return user\r\n    })\r\n}\r\n\r\nfunction logout () {\r\n  localStorage.removeItem('usuario')\r\n}\r\n\r\nfunction handleResponse (response) {\r\n  return response.text().then(text => {\r\n    const data = text && JSON.parse(text)\r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        logout()\r\n        location.reload(true)\r\n      }\r\n      const error = (data && data.message) || response.statusText\r\n      return Promise.reject(error)\r\n    }\r\n    return data\r\n  })\r\n}\r\n"]}]}